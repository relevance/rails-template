BLACK_TEXT =   "\033[30m"
RED_TEXT =     "\033[31m"
GREEN_TEXT =   "\033[32m"
BROWN_TEXT =   "\033[33m"
BLUE_TEXT =    "\033[34m"
MAGENTA_TEXT = "\033[35m"
CYAN_TEXT =    "\033[36m"
GRAY_TEXT =    "\033[37m"

BLACK_BACK =   "\033[40m"
RED_BACK =     "\033[41m"
GREEN_BACK =   "\033[42m"
BROWN_BACK =   "\033[43m"
BLUE_BACK =    "\033[44m"
MAGENTA_BACK = "\033[45m"
CYAN_BACK =    "\033[46m"
WHITE_BACK =   "\033[47m"

RESET_COLORS = "\033[0m"
BOLD_ON =      "\033[1m"
BLINK_ON =     "\033[5m"
REVERSE_ON =   "\033[7m"
BOLD_OFF =     "\033[22m"
BLINK_OFF =    "\033[25m"
REVERSE_OFF =  "\033[27m"

def recipes; @recipes end
def recipe?(name); @recipes.include?(name) end
def prefs; @prefs end
def prefer(key, value); @prefs[key].eql? value end
def gems; @gems end

def say_custom(tag, text); say "#{BOLD_ON}#{CYAN_TEXT}" + tag.to_s.rjust(10) + RESET_COLORS + "  #{text}" end
def say_recipe(name); say "#{BOLD_ON}#{CYAN_TEXT}" + "recipe".rjust(10) + RESET_COLORS + "  Running #{name} recipe..." end
def say_wizard(text); say_custom(@current_recipe || 'composer', text) end

def ask_wizard(question)
  ask "#{BOLD_ON}#{REVERSE_ON}" + (@current_recipe || "prompt").rjust(10) + "#{BOLD_ON}" + "  #{question}#{REVERSE_OFF}"
end

def yes_wizard?(question)
  answer = ask_wizard(question + " \033[33m(y/n)\033[0m")
  case answer.downcase
    when "yes", "y"
      true
    when "no", "n"
      false
    else
      yes_wizard?(question)
  end
end

def no_wizard?(question); !yes_wizard?(question) end

def multiple_choice(question, choices)
  say_custom('question', question)
  values = {}
  choices.each_with_index do |choice,i|
    values[(i + 1).to_s] = choice[1]
    say_custom( (i + 1).to_s + ')', choice[0] )
  end
  answer = ask_wizard("Enter your selection:") while !values.keys.include?(answer)
  values[answer]
end

@current_recipe = nil
@configs = {}

@after_blocks = []
def after_bundler(&block); @after_blocks << [@current_recipe, block]; end
@after_everything_blocks = []
def after_everything(&block); @after_everything_blocks << [@current_recipe, block]; end
@before_configs = {}
def before_config(&block); @before_configs[@current_recipe] = block; end

def copy_from(source, destination)
  begin
    remove_file destination
    get source, destination
  rescue OpenURI::HTTPError
    say_wizard "Unable to obtain #{source}"
  end
end

def copy_from_repo(filename, opts = {})
  repo = 'https://raw.github.com/relevance/rails-template/master/files/'
  repo = opts[:repo] unless opts[:repo].nil?
  if (!opts[:prefs].nil?) && (!prefs.has_value? opts[:prefs])
    return
  end
  source_filename = filename
  destination_filename = filename
  unless opts[:prefs].nil?
    if filename.include? opts[:prefs]
      destination_filename = filename.gsub(/\-#{opts[:prefs]}/, '')
    end
  end
  if (prefer :templates, 'haml') && (filename.include? 'views')
    remove_file destination_filename
    destination_filename = destination_filename.gsub(/.erb/, '.haml')
  end
  if (prefer :templates, 'slim') && (filename.include? 'views')
    remove_file destination_filename
    destination_filename = destination_filename.gsub(/.erb/, '.slim')
  end
  begin
    remove_file destination_filename
    if (prefer :templates, 'haml') && (filename.include? 'views')
      create_file destination_filename, html_to_haml(repo + source_filename)
    elsif (prefer :templates, 'slim') && (filename.include? 'views')
      create_file destination_filename, html_to_slim(repo + source_filename)
    else
      get repo + source_filename, destination_filename
    end
  rescue OpenURI::HTTPError
    say_wizard "Unable to obtain #{source_filename} from the repo #{repo}"
  end
end

def html_to_haml(source)
  html = open(source) {|input| input.binmode.read }
  Haml::HTML.new(html, :erb => true, :xhtml => true).render
end

def html_to_slim(source)
  html = open(source) {|input| input.binmode.read }
  haml = Haml::HTML.new(html, :erb => true, :xhtml => true).render
  Haml2Slim.convert!(haml)
end
