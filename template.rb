# >---------------------------------------------------------------------------<
#            _____       _ _
#           |  __ \     (_) |       /\
#           | |__) |__ _ _| |___   /  \   _ __  _ __  ___
#           |  _  // _` | | / __| / /\ \ | '_ \| '_ \/ __|
#           | | \ \ (_| | | \__ \/ ____ \| |_) | |_) \__ \
#           |_|  \_\__,_|_|_|___/_/    \_\ .__/| .__/|___/
#                                        | |   | |
#                                        |_|   |_|
#
#           +++++++++++++++  Relevance Spin ++++++++++++++++
#
#   Application template generated by the rails_apps_composer gem.
#   Restrain your impulse to make changes to this file; instead,
#   make changes to the recipes in the rails_apps_composer gem.
#
#   For more information, see:
#   https://github.com/RailsApps/rails_apps_composer/
#
#   Thank you to Michael Bleigh for leading the way with the RailsWizard gem.
#
# >---------------------------------------------------------------------------<

# >----------------------------[ Initial Setup ]------------------------------<

run 'bundle update'

initializer 'generators.rb', <<-RUBY
Rails.application.config.generators do |g|
end
RUBY

@recipes = ["git", "setup", "readme", "email", "heroku", "ec2", "gems", "models", "controllers", "authentication", "admin", "koality", "init", "ruby_version", "exception_notification", "testing", "form_builder", "extras", "views", "heroku_deploy"]
@prefs = {:admin=>false, :authentication=>"devise", :heroku_app_name=>"relevance-test", :stack=>"heroku", :devise_user=>true, :devise_modules=>"confirmable"}
@gems = []

BLACK_TEXT =   "\033[30m"
RED_TEXT =     "\033[31m"
GREEN_TEXT =   "\033[32m"
BROWN_TEXT =   "\033[33m"
BLUE_TEXT =    "\033[34m"
MAGENTA_TEXT = "\033[35m"
CYAN_TEXT =    "\033[36m"
GRAY_TEXT =    "\033[37m"

BLACK_BACK =   "\033[40m"
RED_BACK =     "\033[41m"
GREEN_BACK =   "\033[42m"
BROWN_BACK =   "\033[43m"
BLUE_BACK =    "\033[44m"
MAGENTA_BACK = "\033[45m"
CYAN_BACK =    "\033[46m"
WHITE_BACK =   "\033[47m"

RESET_COLORS = "\033[0m"
BOLD_ON =      "\033[1m"
BLINK_ON =     "\033[5m"
REVERSE_ON =   "\033[7m"
BOLD_OFF =     "\033[22m"
BLINK_OFF =    "\033[25m"
REVERSE_OFF =  "\033[27m"

def recipes; @recipes end
def recipe?(name); @recipes.include?(name) end
def prefs; @prefs end
def prefer(key, value); @prefs[key].eql? value end
def gems; @gems end

def say_custom(tag, text); say "#{BOLD_ON}#{CYAN_TEXT}" + tag.to_s.rjust(10) + RESET_COLORS + "  #{text}" end
def say_recipe(name); say "#{BOLD_ON}#{CYAN_TEXT}" + "recipe".rjust(10) + RESET_COLORS + "  Running #{name} recipe..." end
def say_wizard(text); say_custom(@current_recipe || 'composer', text) end

def ask_wizard(question)
  ask "#{BOLD_ON}#{REVERSE_ON}" + (@current_recipe || "prompt").rjust(10) + "#{BOLD_ON}" + "  #{question}#{REVERSE_OFF}"
end

def yes_wizard?(question)
  answer = ask_wizard(question + " \033[33m(y/n)\033[0m")
  case answer.downcase
    when "yes", "y"
      true
    when "no", "n"
      false
    else
      yes_wizard?(question)
  end
end

def no_wizard?(question); !yes_wizard?(question) end

def multiple_choice(question, choices)
  say_custom('question', question)
  values = {}
  choices.each_with_index do |choice,i|
    values[(i + 1).to_s] = choice[1]
    say_custom( (i + 1).to_s + ')', choice[0] )
  end
  answer = ask_wizard("Enter your selection:") while !values.keys.include?(answer)
  values[answer]
end

@current_recipe = nil
@configs = {}

@after_blocks = []
def after_bundler(&block); @after_blocks << [@current_recipe, block]; end
@after_everything_blocks = []
def after_everything(&block); @after_everything_blocks << [@current_recipe, block]; end
@before_configs = {}
def before_config(&block); @before_configs[@current_recipe] = block; end

def copy_from(source, destination)
  begin
    remove_file destination
    get source, destination
  rescue OpenURI::HTTPError
    say_wizard "Unable to obtain #{source}"
  end
end

def copy_from_repo(filename, opts = {})
  repo = 'https://raw.github.com/relevance/rails-template/master/files/'
  repo = opts[:repo] unless opts[:repo].nil?
  if (!opts[:prefs].nil?) && (!prefs.has_value? opts[:prefs])
    return
  end
  source_filename = filename
  destination_filename = filename
  unless opts[:prefs].nil?
    if filename.include? opts[:prefs]
      destination_filename = filename.gsub(/\-#{opts[:prefs]}/, '')
    end
  end
  if (prefer :templates, 'haml') && (filename.include? 'views')
    remove_file destination_filename
    destination_filename = destination_filename.gsub(/.erb/, '.haml')
  end
  if (prefer :templates, 'slim') && (filename.include? 'views')
    remove_file destination_filename
    destination_filename = destination_filename.gsub(/.erb/, '.slim')
  end
  begin
    remove_file destination_filename
    if (prefer :templates, 'haml') && (filename.include? 'views')
      create_file destination_filename, html_to_haml(repo + source_filename)
    elsif (prefer :templates, 'slim') && (filename.include? 'views')
      create_file destination_filename, html_to_slim(repo + source_filename)
    else
      get repo + source_filename, destination_filename
    end
  rescue OpenURI::HTTPError
    say_wizard "Unable to obtain #{source_filename} from the repo #{repo}"
  end
end

def html_to_haml(source)
  html = open(source) {|input| input.binmode.read }
  Haml::HTML.new(html, :erb => true, :xhtml => true).render
end

def html_to_slim(source)
  html = open(source) {|input| input.binmode.read }
  haml = Haml::HTML.new(html, :erb => true, :xhtml => true).render
  Haml2Slim.convert!(haml)
end


# this application template only supports Rails version 3.1 and newer
case Rails::VERSION::MAJOR.to_s
when "3"
  case Rails::VERSION::MINOR.to_s
  when "0"
    say_wizard "You are using Rails version #{Rails::VERSION::STRING} which is not supported. Try 3.1 or newer."
    raise StandardError.new "Rails #{Rails::VERSION::STRING} is not supported. Try 3.1 or newer."
  end
else
  say_wizard "You are using Rails version #{Rails::VERSION::STRING} which is not supported. Try 3.1 or newer."
  raise StandardError.new "Rails #{Rails::VERSION::STRING} is not supported. Try 3.1 or newer."
end

say_wizard "Using rails_apps_composer recipes to generate an application."

# >---------------------------[ Autoload Modules/Classes ]-----------------------------<

inject_into_file 'config/application.rb', :after => 'config.autoload_paths += %W(#{config.root}/extras)' do <<-'RUBY'

    config.autoload_paths += %W(#{config.root}/lib)
RUBY
end

# >---------------------------------[ Recipes ]----------------------------------<


# >----------------------------------[ git ]----------------------------------<

@current_recipe = "git"
@before_configs["git"].call if @before_configs["git"]
say_recipe 'git'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/git.rb

## Git
say_wizard "initialize git"
prefs[:git] = true unless prefs.has_key? :git
if prefer :git, true
  copy_from 'https://raw.github.com/RailsApps/rails-composer/master/files/gitignore.txt', '.gitignore'
  git :init
  git :add => '-A'
  git :commit => '-qm "rails_apps_composer: initial commit"'
end


# >---------------------------------[ setup ]---------------------------------<

@current_recipe = "setup"
@before_configs["setup"].call if @before_configs["setup"]
say_recipe 'setup'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/setup.rb

## Ruby on Rails
HOST_OS = RbConfig::CONFIG['host_os']
say_wizard "Your operating system is #{HOST_OS}."
say_wizard "You are using Ruby version #{RUBY_VERSION}."
say_wizard "You are using Rails version #{Rails::VERSION::STRING}."


prefs[:stack] = multiple_choice "Choose your stack", [["Heroku", "heroku"], ["EC2", "ec2"]] unless prefs.has_key? :stack

prefs[:admin] = yes_wizard? "Do you want to install ActiveAdmin?" unless prefs.has_key? :admin

prefs[:authentication] = multiple_choice "What authentication solution would you like to use?", [["None", "none"], ["Devise", "devise"], ["OmniAuth", "omniauth"], ["Devise + OmniAuth", "devise-omniauth"]] unless prefs.has_key? :authentication


# save diagnostics before anything can fail
create_file "README", "RECIPES\n#{recipes.sort.inspect}\n"
append_file "README", "PREFERENCES\n#{prefs.inspect}"


# >--------------------------------[ readme ]---------------------------------<

@current_recipe = "readme"
@before_configs["readme"].call if @before_configs["readme"]
say_recipe 'readme'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/readme.rb

after_everything do
  say_wizard "recipe running after everything"

  # remove default READMEs
  %w{
    README
    README.rdoc
    doc/README_FOR_APP
  }.each { |file| remove_file file }

  # add placeholder READMEs and humans.txt file
  copy_from_repo 'public/humans.txt'
  copy_from_repo 'README'
  copy_from_repo 'README.textile'
  gsub_file "README", /App_Name/, "#{app_name.humanize.titleize}"
  gsub_file "README.textile", /App_Name/, "#{app_name.humanize.titleize}"

  # Diagnostics
  gsub_file "README.textile", /RECIPES/, recipes.sort.inspect
  gsub_file "README.textile", /PREFERENCES/, prefs.inspect
  gsub_file "README", /RECIPES/, recipes.sort.inspect
  gsub_file "README", /PREFERENCES/, prefs.inspect

  # Ruby on Rails
  gsub_file "README.textile", /\* Ruby/, "* Ruby version #{RUBY_VERSION}"
  gsub_file "README.textile", /\* Rails/, "* Rails version #{Rails::VERSION::STRING}"
end # after_everything


# >---------------------------------[ email ]---------------------------------<

@current_recipe = "email"
@before_configs["email"].call if @before_configs["email"]
say_recipe 'email'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/email.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  unless prefer :email, 'none'
    ### DEVELOPMENT
    gsub_file 'config/environments/development.rb', /# Don't care if the mailer can't send/, '# ActionMailer Config'
    gsub_file 'config/environments/development.rb', /config.action_mailer.raise_delivery_errors = false/ do
  <<-RUBY
config.action_mailer.default_url_options = { :host => 'localhost:3000' }
  config.action_mailer.delivery_method = :smtp
  # change to true to allow email to be sent during development
  config.action_mailer.perform_deliveries = false
  config.action_mailer.raise_delivery_errors = true
  config.action_mailer.default :charset => "utf-8"
RUBY
    end
    ### TEST
    inject_into_file 'config/environments/test.rb', :before => "\nend" do 
  <<-RUBY
\n  
  # ActionMailer Config
  config.action_mailer.default_url_options = { :host => 'example.com' }
RUBY
    end
    ### PRODUCTION
    gsub_file 'config/environments/production.rb', /config.active_support.deprecation = :notify/ do
  <<-RUBY
config.active_support.deprecation = :notify

  config.action_mailer.default_url_options = { :host => 'example.com' }
  # ActionMailer Config
  # Setup for production - deliveries, no errors raised
  config.action_mailer.delivery_method = :smtp
  config.action_mailer.perform_deliveries = true
  config.action_mailer.raise_delivery_errors = false
  config.action_mailer.default :charset => "utf-8"
RUBY
    end
  end
  ### GMAIL ACCOUNT
  if prefer :email, 'gmail'
    gmail_configuration_text = <<-TEXT
\n
  config.action_mailer.smtp_settings = {
    address: "smtp.gmail.com",
    port: 587,
    domain: "example.com",
    authentication: "plain",
    enable_starttls_auto: true,
    user_name: ENV["GMAIL_USERNAME"],
    password: ENV["GMAIL_PASSWORD"]
  }
TEXT
    inject_into_file 'config/environments/development.rb', gmail_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
    inject_into_file 'config/environments/production.rb', gmail_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
  end
  ### SENDGRID ACCOUNT
  if prefer :email, 'sendgrid'
    sendgrid_configuration_text = <<-TEXT
\n
  config.action_mailer.smtp_settings = {
    address: "smtp.sendgrid.net",
    port: 25,
    domain: "example.com",
    authentication: "plain",
    user_name: ENV["SENDGRID_USERNAME"],
    password: ENV["SENDGRID_PASSWORD"]
  }
TEXT
    inject_into_file 'config/environments/development.rb', sendgrid_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
    inject_into_file 'config/environments/production.rb', sendgrid_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
  end
    ### MANDRILL ACCOUNT
    if prefer :email, 'mandrill'
      mandrill_configuration_text = <<-TEXT
  \n
    config.action_mailer.smtp_settings = {
      :address   => "smtp.mandrillapp.com",
      :port      => 25,
      :user_name => ENV["MANDRILL_USERNAME"],
      :password  => ENV["MANDRILL_API_KEY"]
    }
  TEXT
      inject_into_file 'config/environments/development.rb', mandrill_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
      inject_into_file 'config/environments/production.rb', mandrill_configuration_text, :after => 'config.action_mailer.default :charset => "utf-8"'
    end
    ### GIT
    git :add => '-A' if prefer :git, true
    git :commit => '-qm "rails_apps_composer: set email accounts"' if prefer :git, true
end # after_bundler


# >--------------------------------[ heroku ]---------------------------------<

@current_recipe = "heroku"
@before_configs["heroku"].call if @before_configs["heroku"]
say_recipe 'heroku'


@configs[@current_recipe] = config

if prefer :stack, "heroku"
  prefs[:database]       = "postgresql"
  prefs[:prod_webserver] = 'unicorn'
  prefs[:dev_webserver]  = 'unicorn'
  prefs[:unit_test]      = "rspec"
  prefs[:integration]    = "rspec-capybara"
  prefs[:fixtures]       = "factory_girl"
  prefs[:email]          = "gmail"
end


# >----------------------------------[ ec2 ]----------------------------------<

@current_recipe = "ec2"
@before_configs["ec2"].call if @before_configs["ec2"]
say_recipe 'ec2'


@configs[@current_recipe] = config

# Guessing at these settings; making them all-different from Heroku means we can move forward with testing.

if prefer :stack, "ec2"
  prefs[:database]       = "mysql"
  prefs[:dev_webserver]  = "thin"
  prefs[:prod_webserver] = "thin"
  prefs[:templates]      = "slim"
  prefs[:unit_test]      = "minitest" # TODO: Conditionally undo skip_test_unit arg in defaults.yml
  prefs[:integration]    = "minitest-capybara"
  prefs[:fixtures]       = "machinist"
  prefs[:email]          = "smtp"
end


# >---------------------------------[ gems ]----------------------------------<

@current_recipe = "gems"
@before_configs["gems"].call if @before_configs["gems"]
say_recipe 'gems'


@configs[@current_recipe] = config

gem 'pry'

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/gems.rb

### GEMFILE ###

## Ruby on Rails
insert_into_file 'Gemfile', "ruby '1.9.3'\n", :before => "gem 'rails', '3.2.6'" if prefer :stack, 'heroku'

## Database Adapter
gsub_file 'Gemfile', /gem 'sqlite3'\n/, ''
gem 'pg', '>= 0.14.1' if prefer :database, 'postgresql'
gem 'mysql2', '>= 0.3.11' if prefer :database, 'mysql'

## Template Engine
if prefer :templates, 'haml'
  gem 'haml', '>= 3.1.7'
  gem 'haml-rails', '>= 0.3.5', :group => :development
  # hpricot and ruby_parser are needed for conversion of HTML to Haml
  gem 'hpricot', '>= 0.8.6', :group => :development
  gem 'ruby_parser', '>= 2.3.1', :group => :development
end
if prefer :templates, 'slim'
  gem 'slim', '>= 1.3.2'
  gem 'haml2slim', '>= 0.4.6', :group => :development
  # Haml is needed for conversion of HTML to Slim
  gem 'haml', '>= 3.1.6', :group => :development
  gem 'haml-rails', '>= 0.3.5', :group => :development
  gem 'hpricot', '>= 0.8.6', :group => :development
  gem 'ruby_parser', '>= 2.3.1', :group => :development
end

## Testing Framework
if prefer :unit_test, 'rspec'
  gem 'rspec-rails', '>= 2.11.0', :group => [:development, :test]
  gem 'capybara', '>= 1.1.2', :group => :test if prefer :integration, 'rspec-capybara'
  gem 'email_spec', '>= 1.2.1', :group => :test
end
if prefer :unit_test, 'minitest'
  gem 'minitest-spec-rails', '>= 3.0.7', :group => :test
  gem 'minitest-wscolor', '>= 0.0.3', :group => :test
  gem 'capybara', '>= 1.1.2', :group => :test if prefer :integration, 'minitest-capybara'
end
# if prefer :integration, 'cucumber'
#   gem 'cucumber-rails', '>= 1.3.0', :group => :test, :require => false
#   gem 'database_cleaner', '>= 0.9.1', :group => :test
#   gem 'launchy', '>= 2.1.2', :group => :test
#   gem 'capybara', '>= 1.1.2', :group => :test
# end
#gem 'turnip', '>= 1.0.0', :group => :test if prefer :integration, 'turnip'
gem 'factory_girl_rails', '>= 4.1.0', :group => [:development, :test] if prefer :fixtures, 'factory_girl'
#gem 'fabrication', '>= 2.3.0', :group => [:development, :test] if prefer :fixtures, 'fabrication'
gem 'machinist', '>= 2.0', :group => :test if prefer :fixtures, 'machinist'

## Email
gem 'sendgrid', '>= 1.0.1' if prefer :email, 'sendgrid'
#gem 'hominid', '>= 3.0.5' if prefer :email, 'mandrill'

## Gems from a defaults file or added interactively
gems.each do |g|
  gem g
end

## Git
git :add => '-A' if prefer :git, true
git :commit => '-qm "rails_apps_composer: Gemfile"' if prefer :git, true

### CREATE DATABASE ###
after_bundler do
  copy_from_repo 'config/database-postgresql.yml', :prefs => 'postgresql'
  copy_from_repo 'config/database-mysql.yml', :prefs => 'mysql'
  default_username = ENV['USER']
  if prefer :database, 'postgresql'
    begin
      say_wizard "Creating a user named '#{default_username}' for PostgreSQL"
      run %{sudo su postgres -c "createuser -d -R -S #{default_username}"} if prefer :database, 'postgresql'
      gsub_file "config/database.yml", /username: .*/, "username: #{default_username}"
    rescue StandardError => e
      raise "unable to create a user for PostgreSQL, reason: #{e}"
    end
    gsub_file "config/database.yml", /database: myapp_development/, "database: #{app_name}_development"
    gsub_file "config/database.yml", /database: myapp_test/,        "database: #{app_name}_test"
    gsub_file "config/database.yml", /database: myapp_production/,  "database: #{app_name}_production"
  end
  if prefer :database, 'mysql'
    mysql_username = ask_wizard("Username for MySQL? (leave blank to use '#{default_username}')")
    if mysql_username.blank?
      gsub_file "config/database.yml", /username: .*/, "username: #{default_username}"
    else
      gsub_file "config/database.yml", /username: .*/, "username: #{mysql_username}"
      mysql_password = ask_wizard("Password for MySQL user #{mysql_username}?")
      gsub_file "config/database.yml", /password:/, "password: #{mysql_password}"
      say_wizard "set config/database.yml for username/password #{mysql_username}/#{mysql_password}"
    end
    gsub_file "config/database.yml", /database: myapp_development/, "database: #{app_name}_development"
    gsub_file "config/database.yml", /database: myapp_test/,        "database: #{app_name}_test"
    gsub_file "config/database.yml", /database: myapp_production/,  "database: #{app_name}_production"
  end
  db_create_error = Open3.capture3("bundle exec rake db:create:all")[1]
  puts "Creating databases: #{app_name}_development, #{app_name}_test, #{app_name}_production"
  if db_create_error.include?("already exists")
    puts db_create_error
    if yes_wizard?( "Would you like to quit?")
      exit
    end
  end
  ## Git
  git :add => '-A' if prefer :git, true
  git :commit => '-qm "rails_apps_composer: create database"' if prefer :git, true
end # after_bundler

### GENERATORS ###
after_bundler do
  ## Front-end Framework
  generate 'foundation:install' if prefer :frontend, 'foundation'
  ## Git
  git :add => '-A' if prefer :git, true
  git :commit => '-qm "rails_apps_composer: generators"' if prefer :git, true
end # after_bundler


# >--------------------------------[ models ]---------------------------------<

@current_recipe = "models"
@before_configs["models"].call if @before_configs["models"]
say_recipe 'models'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/models.rb


# >------------------------------[ controllers ]------------------------------<

@current_recipe = "controllers"
@before_configs["controllers"].call if @before_configs["controllers"]
say_recipe 'controllers'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/controllers.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### APPLICATION_CONTROLLER ###
  if prefer :authentication, 'omniauth'
    copy_from_repo 'app/controllers/application_controller.rb', :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
  end

  ### SESSIONS_CONTROLLER ###
  if prefer :authentication, 'omniauth'
    filename = 'app/controllers/sessions_controller.rb'
    copy_from_repo filename, :repo => 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
    gsub_file filename, /twitter/, prefs[:omniauth_provider] unless prefer :omniauth_provider, 'twitter'
  end

  ### HOME_CONTROLLER
  if prefer(:authentication, 'devise') && prefer(:devise_user, true)
    generate 'controller home index' 
    insert_into_file 'app/controllers/home_controller.rb', "\n  before_filter :authenticate_user!\n", :before => "def index"
    insert_into_file 'app/controllers/home_controller.rb', "\n    @users = User.all", :after => "def index"
    copy_from_repo 'app/views/home/index.html.erb'
  end

  ### USERS_CONTROLLER
  if prefer(:authentication, 'devise') && prefer(:devise_user, true)
    generate 'controller users show'
    copy_from_repo 'app/views/users/show.html.erb'
    insert_into_file 'app/controllers/users_controller.rb', "\n  @user = User.find(params[:id])", :after => 'def show'
  end
   
  ### GIT ###
  git :add => '-A' if prefer :git, true
  git :commit => '-qm "rails_apps_composer: controllers"' if prefer :git, true
end # after_bundler


# >----------------------------[ authentication ]-----------------------------<

@current_recipe = "authentication"
@before_configs["authentication"].call if @before_configs["authentication"]
say_recipe 'authentication'


@configs[@current_recipe] = config

prefs[:devise] = prefs[:authentication] && !!prefs[:authentication].match(/devise/)
prefs[:omniauth] = prefs[:authentication] && !!prefs[:authentication].match(/omniauth/)

if prefs[:devise]
  prefs[:devise_modules] = multiple_choice("Devise modules?", [
                                             ["Devise with default modules", "default"],
                                             ["Devise with Confirmable module", "confirmable"],
                                             ["Devise with Confirmable and Invitable modules", "invitable"]]) unless prefs.has_key?(:devise_modules)

  gem 'devise', '~> 2.1.2'
  gem 'devise_invitable', '~> 1.0.3' if prefer :devise_modules, 'invitable'

  prefs[:devise_user] = yes_wizard?("Do you want to create a User model for Devise?") unless prefs.has_key?(:devise_user)
end

if prefs[:omniauth]
  prefs[:omniauth_provider] = multiple_choice("OmniAuth provider?", [
                                                ["Facebook", "facebook"],
                                                ["Twitter", "twitter"],
                                                ["GitHub", "github"],
                                                ["LinkedIn", "linkedin"],
                                                ["Google-Oauth-2", "google_oauth2"],
                                                ["Tumblr", "tumblr"]]) unless prefs.has_key?(:omniauth_provider)

  gem 'omniauth', '~> 1.1.1'
  gem 'omniauth-twitter' if prefer :omniauth_provider, 'twitter'
  gem 'omniauth-facebook' if prefer :omniauth_provider, 'facebook'
  gem 'omniauth-github' if prefer :omniauth_provider, 'github'
  gem 'omniauth-linkedin' if prefer :omniauth_provider, 'linkedin'
  gem 'omniauth-google-oauth2' if prefer :omniauth_provider, 'google_oauth2'
  gem 'omniauth-tumblr' if prefer :omniauth_provider, 'tumblr'
end

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### DEVISE ###
  if prefs[:devise]
    # prevent logging of password_confirmation
    gsub_file 'config/application.rb', /:password/, ':password, :password_confirmation'
    generate 'devise:install'
    generate 'devise_invitable:install' if prefer :devise_modules, 'invitable'
    if prefs[:devise_user]
      generate 'devise user' # create the User model

      ## DEVISE AND ACTIVE RECORD
      generate 'migration AddNameToUsers name:string'
      copy_from_repo 'app/models/user.rb', :repo => 'https://raw.github.com/RailsApps/rails3-devise-rspec-cucumber/master/'
      if prefer(:devise_modules, 'confirmable') || prefer(:devise_modules, 'invitable')
        gsub_file 'app/models/user.rb', /:registerable,/, ":registerable, :confirmable,"
        generate 'migration AddConfirmableToUsers confirmation_token:string confirmed_at:datetime confirmation_sent_at:datetime unconfirmed_email:string'
      end

      ## ROUTES
      devise_paths = ', :path => "", :path_names => { :sign_in => "login", :sign_out => "logout", :sign_up => "register" }'
      insert_into_file 'config/routes.rb', devise_paths, :after => 'devise_for :users'

      insert_into_file 'config/routes.rb', "\n  resources :users", :after => devise_paths
      insert_into_file 'config/routes.rb', "\n  root :to => 'users/sessions#new'", :after => devise_paths
      insert_into_file 'config/routes.rb', " do\n    get '/', :to => 'home#index'\n  end", :after => devise_paths

      ## CONTROLLER
      insert_into_file  'app/controllers/application_controller.rb', "\n\n  def after_sign_in_path_for(resource)\n    '/home/index'\n  end", :after => 'protect_from_forgery' 

      # INITIALIZER
      gsub_file 'config/initializers/devise.rb', "config.sign_out_via = :delete", "config.sign_out_via = :get"
    end
  end

  ### OMNIAUTH ###
  if prefs[:omniauth]
    repo = 'https://raw.github.com/RailsApps/rails3-mongoid-omniauth/master/'
    copy_from_repo 'config/initializers/omniauth.rb', :repo => repo
    gsub_file 'config/initializers/omniauth.rb', /twitter/, prefs[:omniauth_provider] unless prefer :omniauth_provider, 'twitter'
  end

  ### OMNIAUTH ONLY ###
  if prefer :authentication, 'omniauth'
    generate 'model User name:string email:string provider:string uid:string'
    run 'bundle exec rake db:migrate'
    copy_from_repo 'app/models/user.rb', :repo => repo  # copy the User model (Mongoid version)
    gsub_file 'app/models/user.rb', /class User/, 'class User < ActiveRecord::Base'
    gsub_file 'app/models/user.rb', /^\s*include Mongoid::Document\n/, ''
    gsub_file 'app/models/user.rb', /^\s*field.*\n/, ''
    gsub_file 'app/models/user.rb', /^\s*# run 'rake db:mongoid:create_indexes' to create indexes\n/, ''
    gsub_file 'app/models/user.rb', /^\s*index\(\{ email: 1 \}, \{ unique: true, background: true \}\)\n/, ''
  end

  ### DEVISE + OMNIAUTH ###
  if prefer :authentication, 'devise-omniauth'
    if prefer :devise_user, true
      generate 'migration AddOmniauthColumnsToUsers provider:string uid:string'

      gsub_file 'app/models/user.rb', /^end$/, <<-FILE

  # See https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview
  # for more details on using Devise + OmniAuth
  attr_accessible :provider, :uid
  devise :omniauthable

end
FILE
      insert_into_file('config/initializers/devise.rb',
                  "\n  config.omniauth :#{prefs[:omniauth_provider]}, 'APP_ID', 'APP_SECRET'",
                  :after => "Devise.setup do |config|")
    end
  end

  ### GIT ###
  git :add => '-A' if prefer :git, true
  git :commit => '-qm "rails_apps_composer: authentication"' if prefer :git, true
end

after_everything do
  if prefer(:authentication, 'devise') && prefer(:devise_user, true)
    if prefer(:devise_modules, 'confirmable') || prefer(:devise_modules, 'invitable')
      ## DEVISE-CONFIRMABLE
      append_file 'db/seeds.rb' do <<-FILE
puts 'SETTING UP DEFAULT USER LOGIN'
user = User.create! :name => 'First User', :email => 'user@example.com', :password => 'please', :password_confirmation => 'please'
user.confirm!
puts 'New user created: ' << user.name
user2 = User.create! :name => 'Second User', :email => 'user2@example.com', :password => 'please', :password_confirmation => 'please'
user2.confirm!
puts 'New user created: ' << user2.name
FILE
      end
    else
      ## DEVISE-DEFAULT
      append_file 'db/seeds.rb' do <<-FILE
puts 'SETTING UP DEFAULT USER LOGIN'
user = User.create! :name => 'First User', :email => 'user@example.com', :password => 'please', :password_confirmation => 'please'
puts 'New user created: ' << user.name
user2 = User.create! :name => 'Second User', :email => 'user2@example.com', :password => 'please', :password_confirmation => 'please'
puts 'New user created: ' << user2.name
FILE
      end
    end
    ## DEVISE-INVITABLE
    if prefer :devise_modules, 'invitable'
      run 'bundle exec rake db:migrate'
      generate 'devise_invitable user'
    end
  end
end


# >---------------------------------[ admin ]---------------------------------<

@current_recipe = "admin"
@before_configs["admin"].call if @before_configs["admin"]
say_recipe 'admin'


@configs[@current_recipe] = config

if prefer :admin, "true"
  prefs[:form_builder] = 'formtastic'

  gem 'activeadmin'

  after_bundler do
    generate "active_admin:install"

    ### GIT ###
    git :add => '-A' if prefer :git, true
    git :commit => '-qm "rails_apps_composer: active_admin"' if prefer :git, true
  end
end


# >--------------------------------[ Koality ]--------------------------------<

@current_recipe = "koality"
@before_configs["koality"].call if @before_configs["koality"]
say_recipe 'Koality'


@configs[@current_recipe] = config

gem 'koality', :group => [:development, :testing]


# >---------------------------------[ init ]----------------------------------<

@current_recipe = "init"
@before_configs["init"].call if @before_configs["init"]
say_recipe 'init'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/init.rb

after_everything do
  say_wizard "applying migrations and seeding the database"
  run 'bundle exec rake db:migrate'
  run 'bundle exec rake db:test:prepare'
  run 'bundle exec rake db:seed'
  ### GIT ###
  git :add => '-A' if prefer :git, true
  git :commit => '-qm "rails_apps_composer: set up database"' if prefer :git, true
end


# >-----------------------------[ ruby-version ]------------------------------<

@current_recipe = "ruby_version"
@before_configs["ruby_version"].call if @before_configs["ruby_version"]
say_recipe 'ruby-version'


@configs[@current_recipe] = config

RUBY_VERSION_PATCH = "#{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}"

say_wizard "recipe creating .ruby-version file and .rbenv-version symlink for Ruby #{RUBY_VERSION_PATCH}"
create_file('.ruby-version') { RUBY_VERSION_PATCH << "\n" }
create_link '.rbenv-version', '.ruby-version'

git :add => '-A' if prefer :git, true
git :commit => '-qm "rails_apps_composer: .ruby-version and .rbenv-version"' if prefer :git, true


# >------------------------[ exception_notification ]-------------------------<

@current_recipe = "exception_notification"
@before_configs["exception_notification"].call if @before_configs["exception_notification"]
say_recipe 'exception_notification'


@configs[@current_recipe] = config

say_wizard "recipe installing exceptional"
gem 'exceptional'
create_file "config/initializers/exceptional.txt", "Further instructions for Exceptional setup are available at http://getexceptional.com/"


# >--------------------------------[ testing ]--------------------------------<

@current_recipe = "testing"
@before_configs["testing"].call if @before_configs["testing"]
say_recipe 'testing'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/testing.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### TEST/UNIT ###
  if prefer :unit_test, 'test_unit'
    inject_into_file 'config/application.rb', :after => "Rails::Application\n" do <<-RUBY

    config.generators do |g|
      #{"g.test_framework :test_unit, fixture_replacement: :fabrication" if prefer :fixtures, 'fabrication'}
      #{"g.fixture_replacement :fabrication, dir: 'test/fabricators'" if prefer :fixtures, 'fabrication'}
    end

RUBY
    end
  end
  ### RSPEC ###
  if prefer :unit_test, 'rspec'
    say_wizard "recipe installing RSpec"
    generate 'rspec:install'
    copy_from_repo 'spec/spec_helper.rb', :repo => 'https://raw.github.com/RailsApps/rails3-devise-rspec-cucumber/master/'
    generate 'email_spec:steps'
    inject_into_file 'spec/spec_helper.rb', "require 'email_spec'\n", :after => "require 'rspec/rails'\n"
    inject_into_file 'spec/spec_helper.rb', :after => "RSpec.configure do |config|\n" do <<-RUBY
  config.include(EmailSpec::Helpers)
  config.include(EmailSpec::Matchers)
RUBY
    end
    run 'rm -rf test/' # Removing test folder (not needed for RSpec)
    inject_into_file 'config/application.rb', :after => "Rails::Application\n" do <<-RUBY

    # don't generate RSpec tests for views and helpers
    config.generators do |g|
      #{"g.test_framework :rspec" if prefer :fixtures, 'none'}
      #{"g.test_framework :rspec, fixture: true" unless prefer :fixtures, 'none'}
      #{"g.fixture_replacement :factory_girl" if prefer :fixtures, 'factory_girl'}
      #{"g.fixture_replacement :machinist" if prefer :fixtures, 'machinist'}
      #{"g.fixture_replacement :fabrication" if prefer :fixtures, 'fabrication'}
      g.view_specs false
      g.helper_specs false
    end

RUBY
    end
    ## RSPEC AND MONGOID
    if prefer :orm, 'mongoid'
      # remove ActiveRecord artifacts
      gsub_file 'spec/spec_helper.rb', /config.fixture_path/, '# config.fixture_path'
      gsub_file 'spec/spec_helper.rb', /config.use_transactional_fixtures/, '# config.use_transactional_fixtures'
      # remove either possible occurrence of "require rails/test_unit/railtie"
      gsub_file 'config/application.rb', /require 'rails\/test_unit\/railtie'/, '# require "rails/test_unit/railtie"'
      gsub_file 'config/application.rb', /require "rails\/test_unit\/railtie"/, '# require "rails/test_unit/railtie"'
      # configure RSpec to use matchers from the mongoid-rspec gem
      create_file 'spec/support/mongoid.rb' do
      <<-RUBY
RSpec.configure do |config|
  config.include Mongoid::Matchers
end
RUBY
      end
    end
    ## RSPEC AND DEVISE
    if prefer :devise, true
      # add Devise test helpers
      create_file 'spec/support/devise.rb' do
      <<-RUBY
RSpec.configure do |config|
  config.include Devise::TestHelpers, :type => :controller
end
RUBY
      end
    end
  end

  ### GIT ###
  git :add => '-A' if prefer :git, true
  git :commit => '-qm "rails_apps_composer: testing framework"' if prefer :git, true
end # after_bundler

after_everything do
  say_wizard "recipe running after everything"
  ### FABRICATION ###
  if prefer :fixtures, 'fabrication'
    say_wizard "replacing FactoryGirl fixtures with Fabrication"
    remove_file 'spec/factories/users.rb'
    remove_file 'spec/fabricators/user_fabricator.rb'
    create_file 'spec/fabricators/user_fabricator.rb' do
      <<-RUBY
Fabricator(:user) do
  name     'Test User'
  email    'example@example.com'
  password 'please'
  password_confirmation 'please'
  # required if the Devise Confirmable module is used
  # confirmed_at Time.now
end
RUBY
    end
    gsub_file 'features/step_definitions/user_steps.rb', /@user = FactoryGirl.create\(:user, email: @visitor\[:email\]\)/, '@user = Fabricate(:user, email: @visitor[:email])'
    gsub_file 'spec/controllers/users_controller_spec.rb', /@user = FactoryGirl.create\(:user\)/, '@user = Fabricate(:user)'
  end
end # after_everything


# >-----------------------------[ form_builder ]------------------------------<

@current_recipe = "form_builder"
@before_configs["form_builder"].call if @before_configs["form_builder"]
say_recipe 'form_builder'


@configs[@current_recipe] = config

if prefer :form_builder, 'formtastic'
  gem 'formtastic'
end

after_bundler do
  if prefer :form_builder, 'formtastic'
    say_wizard "recipe installing formtastic"
    generate 'formtastic:install'
  end

  if prefer :git, true
    git :add => '-A'
    git :commit => '-qm "rails_apps_composer: form builders"'
  end
end


# >--------------------------------[ extras ]---------------------------------<

@current_recipe = "extras"
@before_configs["extras"].call if @before_configs["extras"]
say_recipe 'extras'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/extras.rb

## QUIET ASSETS
gem 'quiet_assets', '>= 1.0.1', :group => :development

## AFTER_EVERYTHING
after_everything do
  say_wizard "recipe removing unnecessary files and whitespace"
  %w{
    public/index.html
    app/assets/images/rails.png
  }.each { |file| remove_file file }
  # remove commented lines and multiple blank lines from Gemfile
  # thanks to https://github.com/perfectline/template-bucket/blob/master/cleanup.rb
  gsub_file 'Gemfile', /#.*\n/, "\n"
  gsub_file 'Gemfile', /\n^\s*\n/, "\n"
  # remove commented lines and multiple blank lines from config/routes.rb
  gsub_file 'config/routes.rb', /  #.*\n/, "\n"
  gsub_file 'config/routes.rb', /\n^\s*\n/, "\n"
  # GIT
  git :add => '-A' if prefer :git, true
  git :commit => '-qm "rails_apps_composer: extras"' if prefer :git, true
end


# >---------------------------------[ views ]---------------------------------<

@current_recipe = "views"
@before_configs["views"].call if @before_configs["views"]
say_recipe 'views'


@configs[@current_recipe] = config

# Application template recipe for the rails_apps_composer. Change the recipe here:
# https://github.com/RailsApps/rails_apps_composer/blob/master/recipes/views.rb

after_bundler do
  say_wizard "recipe running after 'bundle install'"
  ### DEVISE ###
  if prefer(:devise, true)
    copy_from_repo 'app/views/devise/shared/_links.html.erb'
    if prefer(:form_builder, 'simple_form')
      copy_from_repo 'app/views/devise/registrations/edit-simple_form.html.erb', :prefs => 'simple_form'
      copy_from_repo 'app/views/devise/registrations/new-simple_form.html.erb', :prefs => 'simple_form'
      copy_from_repo 'app/views/devise/sessions/new-simple_form.html.erb', :prefs => 'simple_form'
    else
      copy_from_repo 'app/views/devise/registrations/edit.html.erb'
      copy_from_repo 'app/views/devise/registrations/new.html.erb'
    end
  end
  ### HOME ###
  copy_from_repo 'app/views/home/index-subdomains_app.html.erb', :prefs => 'subdomains_app'
  ### USERS ###
  ### PROFILES ###
  copy_from_repo 'app/views/profiles/show-subdomains_app.html.erb', :prefs => 'subdomains_app'
  ### GIT ###
  git :add => '-A' if prefer :git, true
  git :commit => '-qm "rails_apps_composer: views"' if prefer :git, true
end # after_bundler


# >-------------------------------[ finalize ]--------------------------------<

@current_recipe = "heroku_deploy"
@before_configs["heroku_deploy"].call if @before_configs["heroku_deploy"]
say_recipe 'finalize'


@configs[@current_recipe] = config

after_everything do 
  if prefer :stack, 'heroku'
    require 'timeout'
    begin
      Timeout.timeout(5) do
        @pipe = IO.popen("heroku auth:whoami")
        Process.wait @pipe.pid
        @heroku_user = @pipe.read
        puts "********** #{@heroku_user.chomp} ********"
      end
    rescue Timeout::Error
      @heroku_user = nil
      Process.kill 9, @pipe.pid
      Process.wait @pipe.pid
    end

    if @heroku_user
      %x{heroku create #{prefs[:heroku_app_name]}}
      if prefs[:heroku_app_name]
        %x{heroku git:remote -a #{prefs[:heroku_app_name] }}
        %x{git push heroku master -f}
        %x{heroku pg:reset DATABASE_URL --confirm #{prefs[:heroku_app_name]}}
      end
      %x{heroku run rake db:migrate db:seed}
    else
      puts "Could not create and deploy heroku application because you are not logged in!"
    end
  end
end



# >-----------------------------[ Custom Code ]-------------------------------<



@current_recipe = nil

# >-----------------------------[ Run 'Bundle Install' ]-------------------------------<

say_wizard "Installing gems. This will take a while."
if prefs.has_key? :bundle_path
  run "bundle install --without production --path #{prefs[:bundle_path]}"
else
  run 'bundle install --without production'
end

# >-----------------------------[ Run 'After Bundler' Callbacks ]-------------------------------<

say_wizard "Running 'after bundler' callbacks."
require 'bundler/setup'
if prefer :templates, 'haml'
  say_wizard "importing html2haml conversion tool"
  require 'haml/html'
end
if prefer :templates, 'slim'
  say_wizard "importing html2haml and haml2slim conversion tools"
  require 'haml/html'
  require 'haml2slim'
end
@after_blocks.each{|b| config = @configs[b[0]] || {}; @current_recipe = b[0]; b[1].call}

# >-----------------------------[ Run 'After Everything' Callbacks ]-------------------------------<

@current_recipe = nil
say_wizard "Running 'after everything' callbacks."
@after_everything_blocks.each{|b| config = @configs[b[0]] || {}; @current_recipe = b[0]; b[1].call}

@current_recipe = nil
say_wizard "Finished running the rails_apps_composer app template."
say_wizard "Your new Rails app is ready. Time to run 'bundle install'."
